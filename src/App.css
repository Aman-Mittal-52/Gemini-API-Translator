/* 
import React, { useEffect, useState } from "react";
import {
  Box,
  Heading,
  Input,
  Select,
  Slider,
  SliderTrack,
  SliderFilledTrack,
  SliderThumb,
  Button,
  Text,
  VStack,
  FormControl,
  FormLabel,
} from "@chakra-ui/react";

function App() {
  const [voices, setVoices] = useState([]);
  const [selectedVoice, setSelectedVoice] = useState("");
  const [volume, setVolume] = useState(1);
  const [message, setMessage] = useState("");

  useEffect(() => {
    // Load voices on mount
    const loadVoices = () => {
      const voicesList = window.speechSynthesis.getVoices();
      setVoices(voicesList);
    };

    loadVoices();
    window.speechSynthesis.onvoiceschanged = loadVoices;
  }, []);

  const speak = () => {
    if (message) {
      const msg = new SpeechSynthesisUtterance();
      msg.text = message;
      msg.volume = volume;

      if (selectedVoice) {
        msg.voice = voices.find((voice) => voice.name === selectedVoice);
      }

      window.speechSynthesis.speak(msg);
    }
  };

  return (
    <Box maxW="640px" mx="auto" mt="4" p="6" bg="white" shadow="md" borderRadius="md">
      <Heading as="h1" mb="4">
        Web Speech Synthesis Demo
      </Heading>

      <Text mb="4" fontSize="sm">
        {window.speechSynthesis ? (
          "Your browser supports speech synthesis."
        ) : (
          <Text color="red">Sorry, your browser does not support speech synthesis.</Text>
        )}
      </Text>

      <VStack spacing={4} align="stretch">
        <FormControl>
          <FormLabel>Message</FormLabel>
          <Input
            type="text"
            placeholder="Type a message..."
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
        </FormControl>

        <FormControl>
          <FormLabel>Voice</FormLabel>
          <Select
            placeholder="Select a voice"
            value={selectedVoice}
            onChange={(e) => setSelectedVoice(e.target.value)}
          >
            {voices.map((voice, index) => (
              <option key={index} value={voice.name}>
                {voice.name}
              </option>
            ))}
          </Select>
        </FormControl>

        <FormControl>
          <FormLabel>Volume</FormLabel>
          <Slider
            defaultValue={1}
            min={0}
            max={1}
            step={0.1}
            value={volume}
            onChange={(val) => setVolume(val)}
          >
            <SliderTrack>
              <SliderFilledTrack />
            </SliderTrack>
            <SliderThumb />
          </Slider>
        </FormControl>

        <Button colorScheme="green" onClick={speak} width="full">
          Speak
        </Button>
      </VStack>
    </Box>
  );
}

export default App; */


.app{
  background: linear-gradient(90deg, #000000, #4b0082, #6a0dad);;
}

.language-select{
  border: 1px solid red;
  background: #000000;
  color: #ffffff;
}